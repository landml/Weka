# -*- coding: utf-8 -*-
#BEGIN_HEADER
#END_HEADER


class Weka:
    '''
    Module Name:
    Weka

    Module Description:
    A KBase module: Weka
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = ""
    GIT_COMMIT_HASH = ""

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        #END_CONSTRUCTOR
        pass

    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]

    def DecisionTree(self, ctx, params):
	#runs J48 Deicison trees in weka on phenotype set

	### STEP 1 - Parse input and catch any errors
	if 'workspace_name' not in params:
		raise ValueError('Parameter workspace is not set in input arguments')
	workspace_name = params['workspace_name']
	if 'phenotype' not in params:
		raise ValueError('Parameter phenotype is not set in input arguments')
	phenotype = params['phenotype']

	#STEP 2 - Get the input data
	token = stx['token']
	wsClient = workspaceService(self.workspaceURL, token=token)
	try:
		pheno = wsClient.get_objects([{'ref': phenotype}])[0]['data']
	except:
		exc_type, exc_value, exc_traceback = sys.exc_info()
		lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
		orig_error = ''.join('   ' + line for line in lines)
		raise ValueError('Error loading original Phenotype object from workspace:\n' + orig_error)
	print('Got Phenotype')

	### STEP 3 - Create Matrix

	### STEP 4 - Print matrix to file

	### STEP 5 - Create ARFF file

	### STEP 6 - Send to WEKA

	### STEP 7 - Print tree result to report
	report = "Success"
	returnVal = {
		'report_name':'DT_report',
		'report_ref': report}
	return [returnVal]	

